{"version":3,"sources":["components/Info.js","components/Weather.js","components/FormControl.js","components/Data.js","utils/Constants.js","App.js","serviceWorker.js","index.js"],"names":["Info","Weather","props","className","message","weather","country","city","temp","pressure","Date","sunset","toTimeString","FormControl","handleChange","event","setState","target","value","handleClick","getWeather","state","this","onChange","type","placeholder","onClick","Component","Data","fetch","then","response","json","data","weatherInfo","name","sys","main","catch","e","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"kOAWeA,MATf,WACI,OACI,6BACI,mDACA,kD,4BCYGC,EAhBC,SAACC,GACb,OACI,yBAAKC,UAAU,cACTD,EAAME,SACR,6BACI,wCAAcF,EAAMG,QAAQC,QAA5B,KAAuCJ,EAAMG,QAAQE,MACrD,oCAAUL,EAAMG,QAAQG,MACxB,wCAAcN,EAAMG,QAAQI,UAC5B,sCAAY,IAAIC,KAA4B,IAAvBR,EAAMG,QAAQM,QAAeC,iBAGtD,2BAAIV,EAAME,WCqBPS,E,kDA/BX,aAAe,IAAD,8BACV,gBAOJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACT,KAAMQ,EAAME,OAAOC,SATxB,EAYdC,YAAc,WACV,EAAKjB,MAAMkB,WAAW,EAAKC,MAAMd,MACjC,EAAKS,SAAS,CAACT,KAAM,MAZrB,EAAKc,MAAQ,CACTd,KAAM,IAHA,E,qDAkBV,OACI,6BACI,2BACIW,MAAOI,KAAKD,MAAMd,KAClBgB,SAAUD,KAAKR,aACfU,KAAK,OACLC,YAAY,SAChB,4BAAQC,QAASJ,KAAKH,aAAtB,oB,GA1BUQ,aC4CXC,E,kDAvCX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAMVkB,WAAa,SAACb,GACVsB,MAAM,GAAD,OCdW,kDDcX,cAAkBtB,EAAlB,kBCfU,mCDeV,kBACAuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKjB,SAAS,CACxBkB,YAAa,CACT3B,KAAM0B,EAAKE,KACX7B,QAAS2B,EAAKG,IAAI9B,QAClBE,KAAMyB,EAAKI,KAAK7B,KAChBC,SAAUwB,EAAKI,KAAK5B,SACpBE,OAAQsB,EAAKG,IAAIzB,QAGrBP,QAAU,UAEbkC,OAAM,SAAAC,GAAC,OAAI,EAAKvB,SAAS,CACtBkB,YAAa,KACb9B,QAAS,gCArBjB,EAAKiB,MAAQ,CACTjB,QAAS,2BAHE,E,qDA6Bf,OACI,6BACI,kBAAC,EAAD,CAAagB,WAAYE,KAAKF,aAC9B,kBAAC,EAAD,CAASf,QAASiB,KAAKD,MAAMa,YAAa9B,QAASkB,KAAKD,MAAMjB,e,GAjC3DoC,IAAMb,WEkBVc,MAnBf,WACI,OACI,yBAAKtC,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,kBAAC,EAAD,YCHRuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLC,QAAQD,MAAMA,EAAMpD,a","file":"static/js/main.9c54f16c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Info() {\n    return (\n        <div>\n            <h2>Weather application</h2>\n            <p>Your city weather</p>\n        </div>\n    );\n}\n\nexport default Info;","import React from 'react';\n\nconst Weather = (props) => {\n    return (\n        <div className=\"infoWeath\">\n            {!props.message &&\n            <div>\n                <p>Location: {props.weather.country}, {props.weather.city}</p>\n                <p>Temp: {props.weather.temp}</p>\n                <p>Pressure: {props.weather.pressure}</p>\n                <p>Sunset: {new Date(props.weather.sunset * 1000).toTimeString()}</p>\n            </div>\n            }\n            <p>{props.message}</p>\n        </div>\n    );\n};\n\nexport default Weather;","import React, {Component} from 'react';\n\nclass FormControl extends Component {\n    constructor() {\n        super();\n        this.state = {\n            city: '',\n\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({city: event.target.value});\n    };\n\n    handleClick = () => {\n        this.props.getWeather(this.state.city);\n        this.setState({city: ''});\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    value={this.state.city}\n                    onChange={this.handleChange}\n                    type='text'\n                    placeholder='City'/>\n                <button onClick={this.handleClick}>Get weather</button>\n            </div>\n        );\n    }\n}\n\nexport default FormControl;","import React from 'react';\nimport Form from \"./Form\";\nimport Weather from \"./Weather\";\nimport {API_KEY, base_url} from \"../utils/Constants\";\nimport FormControl from \"./FormControl\";\n\nclass Data extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: 'Enter correct city name'\n        }\n    }\n\n    getWeather = (city) => {\n        fetch(`${base_url}?q=${city}&appid=${API_KEY}&units=metric`)\n            .then(response => response.json())\n            .then(data => this.setState({\n                weatherInfo: {\n                    city: data.name,\n                    country: data.sys.country,\n                    temp: data.main.temp,\n                    pressure: data.main.pressure,\n                    sunset: data.sys.sunset\n\n                },\n                message : null\n            }))\n            .catch(e => this.setState({\n                weatherInfo: null,\n                message: 'Enter correct city name'\n            }))\n    };\n\n\n    render() {\n        return (\n            <div>\n                <FormControl getWeather={this.getWeather}/>\n                <Weather weather={this.state.weatherInfo} message={this.state.message}/>\n            </div>\n        );\n    }\n\n};\n\nexport default Data;","export const API_KEY = '218a474d0e8f9c9db1556ba9ed0129af';\nexport const base_url = 'https://api.openweathermap.org/data/2.5/weather';","import React from 'react';\nimport './App.css';\nimport Info from \"./components/Info\";\nimport Data from \"./components/Data\";\n\nfunction App() {\n    return (\n        <div className=\"wrapper\">\n            <div className=\"main\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-5 info\">\n                            <Info/>\n                        </div>\n                        <div className=\"col-sm-7 form\">\n                            <Data/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}